{"version":3,"sources":["store/game/GameConstants.tsx","components/game/Game.tsx","constants.tsx","components/home/Home.tsx","store/game/GameActions.tsx","components/Routes.tsx","components/App.tsx","store/game/GameReducer.tsx","store/index.tsx","store/store.tsx","store/configureStore.tsx","index.tsx"],"names":["GameStatus","CREATE_NEW_GAME_REQUESTED","CREATE_NEW_GAME_SUCCEEDED","CREATE_NEW_GAME_FAILED","Game","gameState","useSelector","state","game","status","Waiting","required","requiredToStart","totalUsers","className","Spinner","animation","role","BASE_URL","process","Home","dispatch","useDispatch","navigate","useNavigate","isSearchingForGame","gameId","NIL_UUID","Button","variant","size","onClick","undefined","a","type","body","axios","post","response","console","log","gameData","data","disabled","NotFound","Routes","path","element","App","gameReducer","userId","isWaitingForNextRound","timeOfNextRound","Date","currentRound","currentQuestion","currentAnswers","Unknown","remainingUsers","action","newState","combineReducers","initialState","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e08c6d81.chunk.js","sourcesContent":["\r\nexport const CREATE_NEW_GAME_REQUESTED = \"CREATE_NEW_GAME_REQUESTED\"\r\nexport type CREATE_NEW_GAME_REQUESTED = typeof CREATE_NEW_GAME_REQUESTED\r\n\r\nexport const CREATE_NEW_GAME_SUCCEEDED = \"CREATE_NEW_GAME_SUCCEEDED\"\r\nexport type CREATE_NEW_GAME_SUCCEEDED = typeof CREATE_NEW_GAME_SUCCEEDED\r\nexport const CREATE_NEW_GAME_FAILED = \"CREATE_NEW_GAME_FAILED\"\r\nexport type CREATE_NEW_GAME_FAILED = typeof CREATE_NEW_GAME_FAILED\r\n\r\nexport enum GameStatus {\r\n  Done = \"DONE\",\r\n  Unknown = \"UNKNOWN\",\r\n  Started = \"STARTED\",\r\n  Waiting = \"WAITING\",\r\n}\r\n\r\nexport interface GameData {\r\n  gameId: string\r\n  userId: number\r\n  isWaitingForNextRound: boolean\r\n  timeOfNextRound: Date\r\n  currentRound: number\r\n  currentQuestion: string\r\n  currentAnswers: number[]\r\n  status: GameStatus\r\n  totalUsers: number\r\n  remainingUsers: number[]\r\n  requiredToStart: number\r\n}\r\n\r\nexport interface CreateNewGameRequested {\r\n  type: CREATE_NEW_GAME_REQUESTED\r\n}\r\n\r\nexport interface CreateNewGameSucceeded {\r\n  type: CREATE_NEW_GAME_SUCCEEDED\r\n  gameData: GameData\r\n}\r\n\r\nexport interface CreateNewGameFailed {\r\n  type: CREATE_NEW_GAME_FAILED\r\n}\r\n\r\nexport type HomeAction =\r\n| CreateNewGameRequested\r\n| CreateNewGameSucceeded\r\n| CreateNewGameFailed","import React from \"react\"\r\nimport Spinner from \"react-bootstrap/Spinner\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { GameStatus } from \"../../store/game/GameConstants\"\r\nimport { State } from \"../../store/store\"\r\nimport \"../../stylesheets/game.css\"\r\n\r\nconst Game = () => {\r\n  // Set up state\r\n  const gameState = useSelector((state: State) => state.game)\r\n\r\n  if (gameState.status === GameStatus.Waiting) {\r\n    const required = gameState.requiredToStart - gameState.totalUsers\r\n    return (\r\n      <div className=\"waiting-container d-flex\">\r\n        <div>\r\n          <Spinner animation=\"border\" role=\"status\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n        <div className=\"waiting-message\">\r\n          {`Waiting for at least ${required} more...`}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport default Game","let baseUrl = \"\"\r\nif (process.env.REACT_APP_API_BASE_URL) {\r\n  baseUrl = process.env.REACT_APP_API_BASE_URL\r\n}\r\n\r\nexport const BASE_URL = baseUrl\r\n","import React from \"react\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { NIL as NIL_UUID } from \"uuid\"\r\nimport { createNewGame } from \"../../store/game/GameActions\"\r\nimport { State } from \"../../store/store\"\r\nimport \"../../stylesheets/home.css\"\r\n\r\nconst Home = () => {\r\n  // Set up state\r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate()\r\n  const isSearchingForGame = useSelector((state: State) => state.game.isSearchingForGame)\r\n  const gameId = useSelector((state: State) => state.game.gameId)\r\n\r\n  const handleClick = () => {\r\n    dispatch(createNewGame())\r\n  }\r\n\r\n  // We found a game\r\n  if (gameId !== NIL_UUID) {\r\n    navigate(`/games/${gameId}`)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"title mt-5\">\r\n        Welcome to the Math Quiz!\r\n      </div>\r\n      <div className=\"description mt-3\">\r\n        Compete with other players to see who can correctly answer the most consecutive math questions.\r\n      </div>\r\n      <div className=\"description mt-3\">\r\n        Find a game below!\r\n      </div>\r\n      <Button\r\n        className=\"mt-5\"\r\n        variant=\"primary\"\r\n        size=\"lg\"\r\n        onClick={!isSearchingForGame ? handleClick : undefined}\r\n        disabled={isSearchingForGame}\r\n      >\r\n        {isSearchingForGame ? \"Searching...\" : \"Find a Game\"}\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home","import axios from \"axios\"\r\nimport { Dispatch } from \"redux\"\r\nimport { BASE_URL } from \"../../constants\"\r\nimport { CreateNewGameFailed, CreateNewGameRequested, CreateNewGameSucceeded, CREATE_NEW_GAME_FAILED, CREATE_NEW_GAME_REQUESTED, CREATE_NEW_GAME_SUCCEEDED, GameData, HomeAction } from \"./GameConstants\"\r\n\r\nexport const createNewGameRequested = (): CreateNewGameRequested => {\r\n  return {\r\n    type: CREATE_NEW_GAME_REQUESTED,\r\n  }\r\n}\r\n\r\nexport const createNewGameSucceeded = (gameData: GameData): CreateNewGameSucceeded => {\r\n  return {\r\n    type: CREATE_NEW_GAME_SUCCEEDED,\r\n    gameData: gameData,\r\n  }\r\n}\r\n\r\nexport const createNewGameFailed = (): CreateNewGameFailed => {\r\n  return {\r\n    type: CREATE_NEW_GAME_FAILED,\r\n  }\r\n}\r\n\r\nexport const createNewGame = () => {\r\n  return async (dispatch: Dispatch<HomeAction>) => {\r\n    dispatch(createNewGameRequested())\r\n    try {\r\n      // Could be filled with game config in future updates\r\n      const body = {}\r\n      const response = await axios.post(`${BASE_URL}/games`, body)\r\n      console.log(response)\r\n      dispatch(createNewGameSucceeded(response.data))\r\n    } catch (error) {\r\n      dispatch(createNewGameFailed())\r\n    }\r\n  }\r\n}","import React from \"react\"\r\nimport { Route, Routes as R } from \"react-router-dom\"\r\nimport \"../stylesheets/index.css\"\r\nimport Game from \"./game/Game\"\r\nimport Home from \"./home/Home\"\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <div className={\"dark-mode-background\"}>\r\n      <h1>Sorry, page not found</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Routes = (): JSX.Element => {\r\n  return (\r\n    <R>\r\n      <Route \r\n        path=\"/\"\r\n        element={<Home />}\r\n      />\r\n      <Route \r\n        path=\"/games/:id\"\r\n        element={<Game />}\r\n      />\r\n      <Route path=\"*\" element={<NotFound/>} />\r\n    </R>\r\n  )\r\n}\r\n\r\nexport default Routes\r\n","import * as React from \"react\"\nimport { BrowserRouter } from \"react-router-dom\"\nimport \"../stylesheets/App.css\"\nimport Routes from \"./Routes\"\n\nconst App = (): JSX.Element => {\n  return (\n    <div className=\"App\">\n      <main>\n      <BrowserRouter>\n        <Routes />\n      </BrowserRouter>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import { NIL as NIL_UUID } from \"uuid\"\r\nimport { CREATE_NEW_GAME_FAILED, CREATE_NEW_GAME_REQUESTED, CREATE_NEW_GAME_SUCCEEDED, GameStatus, HomeAction } from \"./GameConstants\"\r\n\r\n\r\nconst gameReducer = (\r\n  state = {\r\n    isSearchingForGame: false,\r\n    gameId: NIL_UUID,\r\n    userId: 0,\r\n    isWaitingForNextRound: false,\r\n    timeOfNextRound: new Date(),\r\n    currentRound: 0,\r\n    currentQuestion: \"\",\r\n    currentAnswers: []as number[],\r\n    status: GameStatus.Unknown,\r\n    totalUsers: 0,\r\n    remainingUsers: [0],\r\n    requiredToStart: 2,\r\n  },\r\n  action: HomeAction\r\n) => {\r\n  let newState = state\r\n\r\n  switch (action.type) {\r\n    case CREATE_NEW_GAME_REQUESTED:\r\n      newState = {\r\n        ...newState,\r\n        isSearchingForGame: true,\r\n      }\r\n      break\r\n    case CREATE_NEW_GAME_SUCCEEDED:\r\n      newState = {\r\n        ...newState,\r\n        isSearchingForGame: false,\r\n        gameId: action.gameData.gameId,\r\n        userId: action.gameData.userId,\r\n        isWaitingForNextRound: action.gameData.isWaitingForNextRound,\r\n        timeOfNextRound: action.gameData.timeOfNextRound,\r\n        currentRound: action.gameData.currentRound,\r\n        currentQuestion: action.gameData.currentQuestion,\r\n        currentAnswers: action.gameData.currentAnswers,\r\n        status: action.gameData.status,\r\n        totalUsers: action.gameData.totalUsers,\r\n        remainingUsers: action.gameData.remainingUsers,\r\n        requiredToStart: action.gameData.requiredToStart,\r\n\r\n      }\r\n      break\r\n    case CREATE_NEW_GAME_FAILED:\r\n      newState = {\r\n        ...newState,\r\n        isSearchingForGame: false,\r\n        gameId: NIL_UUID,\r\n        userId: 0,\r\n        isWaitingForNextRound: false,\r\n        timeOfNextRound: new Date(),\r\n        currentRound: 0,\r\n        currentQuestion: \"\",\r\n        currentAnswers: []as number[],\r\n        status: GameStatus.Unknown,\r\n        totalUsers: 0,\r\n        remainingUsers: [0],\r\n        requiredToStart: 2\r\n      }\r\n      break\r\n  }\r\n  return newState\r\n}\r\n\r\nexport default gameReducer","import { combineReducers } from \"redux\"\r\nimport gameReducer from \"./game/GameReducer\"\r\n\r\nexport default combineReducers({\r\n  game: gameReducer,\r\n})\r\n","import { NIL as NIL_UUID } from \"uuid\"\r\nimport configureStore from \"./configureStore\"\r\nimport { GameStatus } from \"./game/GameConstants\"\r\n\r\nexport interface State {\r\n  game: {\r\n    isSearchingForGame: boolean\r\n    gameId: string\r\n    userId: number\r\n    isWaitingForNextRound: boolean\r\n    timeOfNextRound: Date\r\n    currentRound: number\r\n    currentQuestion: string\r\n    currentAnswers: number[]\r\n    status: GameStatus\r\n    totalUsers: number\r\n    remainingUsers: number[]\r\n    requiredToStart: number\r\n  }\r\n}\r\n\r\nconst initialState: State = {\r\n  game: {\r\n    isSearchingForGame: false,\r\n    gameId: NIL_UUID,\r\n    userId: 0,\r\n    isWaitingForNextRound: false,\r\n    timeOfNextRound: new Date(),\r\n    currentRound: 0,\r\n    currentQuestion: \"\",\r\n    currentAnswers: [] as number[],\r\n    status: GameStatus.Unknown,\r\n    totalUsers: 0,\r\n    remainingUsers: [0],\r\n    requiredToStart: 2\r\n  }\r\n}\r\n\r\nexport const store = configureStore(initialState)","import { applyMiddleware, createStore } from \"redux\"\r\nimport { composeWithDevTools } from \"redux-devtools-extension\"\r\nimport thunk from \"redux-thunk\"\r\nimport combineReducers from \"./index\"\r\nimport { State } from \"./store\"\r\n\r\nexport default function configureStore(initialState: State) {\r\n  return createStore(combineReducers, initialState, composeWithDevTools(applyMiddleware(thunk)))\r\n}","import \"bootstrap/dist/css/bootstrap.min.css\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport App from \"./components/App\"\nimport { store } from \"./store/store\"\nimport \"./stylesheets/index.css\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}