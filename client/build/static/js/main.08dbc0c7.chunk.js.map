{"version":3,"sources":["store/game/GameConstants.tsx","constants.tsx","store/game/GameActions.tsx","components/game/Game.tsx","components/home/Home.tsx","components/Routes.tsx","components/App.tsx","store/game/GameReducer.tsx","store/index.tsx","store/store.tsx","store/configureStore.tsx","index.tsx"],"names":["GameStatus","BASE_URL","process","CREATE_NEW_GAME_REQUESTED","CREATE_NEW_GAME_SUCCEEDED","CREATE_NEW_GAME_FAILED","GET_GAME_SUCCEEDED","Game","gameState","useSelector","state","game","dispatch","useDispatch","useState","gameStartCheckId","setGameStartCheckId","useEffect","check","setInterval","checkForStart","clearInterval","gameId","a","type","axios","get","response","gameData","data","calculateSecondsUntilRoundStarts","currentTime","Date","now","roundStartTime","JSON","parse","stringify","timeOfNextRound","valueOf","Math","ceil","max","GameStartCountdown","startTime","countdownTimer","shouldCountdownTimerBeCancelled","setShouldCountdownTimerBeCancelled","className","isWaitingForNextRound","WaitingArea","shouldGameStartCheckIdBeCancelled","setShouldGameStartCheckIdBeCancelled","setCountdownTimer","setStartTime","status","Waiting","required","undefined","requiredToStart","totalUsers","min","userId","Spinner","animation","role","Home","isSearchingForGame","NIL_UUID","to","FindGameButton","requestCreateNewGame","setRequestCreateNewGame","handleClick","useCallback","body","post","Button","variant","size","onClick","disabled","NotFound","Routes","path","element","App","gameReducer","currentRound","currentQuestion","currentIncorrectAnswers","currentCorrectAnswer","Unknown","remainingUsers","action","newState","combineReducers","initialState","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08dbc0c7.chunk.js","sourcesContent":["\r\nexport const CREATE_NEW_GAME_REQUESTED = \"CREATE_NEW_GAME_REQUESTED\"\r\nexport type CREATE_NEW_GAME_REQUESTED = typeof CREATE_NEW_GAME_REQUESTED\r\n\r\nexport const CREATE_NEW_GAME_SUCCEEDED = \"CREATE_NEW_GAME_SUCCEEDED\"\r\nexport type CREATE_NEW_GAME_SUCCEEDED = typeof CREATE_NEW_GAME_SUCCEEDED\r\n\r\nexport const CREATE_NEW_GAME_FAILED = \"CREATE_NEW_GAME_FAILED\"\r\nexport type CREATE_NEW_GAME_FAILED = typeof CREATE_NEW_GAME_FAILED\r\n\r\nexport const GET_GAME_REQUESTED = \"GET_GAME_REQUESTED\"\r\nexport type GET_GAME_REQUESTED = typeof GET_GAME_REQUESTED\r\n\r\nexport const GET_GAME_SUCCEEDED = \"GET_GAME_SUCCEEDED\"\r\nexport type GET_GAME_SUCCEEDED = typeof GET_GAME_SUCCEEDED\r\n\r\nexport const GET_GAME_FAILED = \"GET_GAME_FAILED\"\r\nexport type GET_GAME_FAILED = typeof GET_GAME_FAILED\r\n\r\nexport enum GameStatus {\r\n  Done = \"DONE\",\r\n  Unknown = \"UNKNOWN\",\r\n  Started = \"STARTED\",\r\n  Waiting = \"WAITING\",\r\n}\r\n\r\nexport interface GameData {\r\n  gameId: string\r\n  userId: number\r\n  isWaitingForNextRound: boolean\r\n  timeOfNextRound: Date\r\n  currentRound: number\r\n  currentQuestion: string\r\n  currentIncorrectAnswers: string[]\r\n  currentCorrectAnswer: string\r\n  status: GameStatus\r\n  totalUsers: number\r\n  remainingUsers: number[]\r\n  requiredToStart: number\r\n}\r\n\r\nexport interface CreateNewGameRequested {\r\n  type: CREATE_NEW_GAME_REQUESTED\r\n}\r\n\r\nexport interface CreateNewGameSucceeded {\r\n  type: CREATE_NEW_GAME_SUCCEEDED\r\n  gameData: GameData\r\n}\r\n\r\nexport interface CreateNewGameFailed {\r\n  type: CREATE_NEW_GAME_FAILED\r\n}\r\n\r\nexport interface GetGameRequested {\r\n  type: GET_GAME_REQUESTED\r\n}\r\n\r\nexport interface GetGameSucceeded {\r\n  type: GET_GAME_SUCCEEDED\r\n  gameData: GameData\r\n}\r\n\r\nexport interface GetGameFailed {\r\n  type: GET_GAME_FAILED\r\n}\r\n\r\nexport type HomeAction =\r\n| CreateNewGameRequested\r\n| CreateNewGameSucceeded\r\n| CreateNewGameFailed\r\n| GetGameRequested\r\n| GetGameSucceeded\r\n| GetGameFailed","let baseUrl = \"\"\r\nif (process.env.REACT_APP_API_BASE_URL) {\r\n  baseUrl = process.env.REACT_APP_API_BASE_URL\r\n}\r\n\r\nexport const BASE_URL = baseUrl\r\n","import axios from \"axios\"\r\nimport { Dispatch } from \"redux\"\r\nimport { BASE_URL } from \"../../constants\"\r\nimport {\r\n  CreateNewGameFailed,\r\n  CreateNewGameRequested,\r\n  CreateNewGameSucceeded,\r\n  CREATE_NEW_GAME_FAILED,\r\n  CREATE_NEW_GAME_REQUESTED,\r\n  CREATE_NEW_GAME_SUCCEEDED,\r\n  GameData,\r\n  GetGameFailed,\r\n  GetGameRequested,\r\n  GetGameSucceeded,\r\n  GET_GAME_FAILED,\r\n  GET_GAME_REQUESTED,\r\n  GET_GAME_SUCCEEDED,\r\n  HomeAction\r\n} from \"./GameConstants\"\r\n\r\nexport const createNewGameRequested = (): CreateNewGameRequested => {\r\n  return {\r\n    type: CREATE_NEW_GAME_REQUESTED,\r\n  }\r\n}\r\n\r\nexport const createNewGameSucceeded = (gameData: GameData): CreateNewGameSucceeded => {\r\n  return {\r\n    type: CREATE_NEW_GAME_SUCCEEDED,\r\n    gameData: gameData,\r\n  }\r\n}\r\n\r\nexport const createNewGameFailed = (): CreateNewGameFailed => {\r\n  return {\r\n    type: CREATE_NEW_GAME_FAILED,\r\n  }\r\n}\r\n\r\nexport const getGameRequested = (): GetGameRequested => {\r\n  return {\r\n    type: GET_GAME_REQUESTED,\r\n  }\r\n}\r\n\r\nexport const getGameSucceeded = (gameData: GameData): GetGameSucceeded => {\r\n  return {\r\n    type: GET_GAME_SUCCEEDED,\r\n    gameData: gameData,\r\n  }\r\n}\r\n\r\nexport const getGameFailed = (): GetGameFailed => {\r\n  return {\r\n    type: GET_GAME_FAILED,\r\n  }\r\n}\r\n\r\nexport const createNewGame = () => {\r\n  return async (dispatch: Dispatch<HomeAction>) => {\r\n    dispatch(createNewGameRequested())\r\n    try {\r\n      // Could be filled with game config in future updates\r\n      const body = {}\r\n      const response = await axios.post(`${BASE_URL}/games`, body)\r\n      dispatch(createNewGameSucceeded(response.data))\r\n    } catch (error) {\r\n      dispatch(createNewGameFailed())\r\n    }\r\n  }\r\n}\r\n\r\nexport const getGame = (gameId: string) => {\r\n  return async (dispatch: Dispatch<HomeAction>) => {\r\n    dispatch(getGameRequested())\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/games/${gameId}`)\r\n      dispatch(getGameSucceeded(response.data))\r\n    } catch (error) {\r\n      dispatch(getGameFailed())\r\n    }\r\n  }\r\n}","import React, { useEffect, useState } from \"react\"\r\nimport Spinner from \"react-bootstrap/Spinner\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { getGame } from \"../../store/game/GameActions\"\r\nimport { GameStatus } from \"../../store/game/GameConstants\"\r\nimport { State } from \"../../store/store\"\r\nimport \"../../stylesheets/game.css\"\r\n\r\n// Main game view\r\nconst Game = () => {\r\n  // Set up game state\r\n  const gameState = useSelector((state: State) => state.game)\r\n  const dispatch = useDispatch()\r\n  const [gameStartCheckId, setGameStartCheckId] = useState(0)\r\n\r\n  // On component mount, start interval that checks for game state/status\r\n  useEffect(() => {\r\n      /* eslint-disable  @typescript-eslint/no-explicit-any */\r\n    const check: any = setInterval(()=>{checkForStart()}, 2000)\r\n    setGameStartCheckId(check)\r\n    return (() => {\r\n      clearInterval(gameStartCheckId)\r\n    })\r\n  }, [])\r\n  \r\n  // Start polling to see if game is going to start\r\n  const checkForStart = () => {\r\n    dispatch(getGame(gameState.gameId))\r\n  }\r\n\r\n  // Helper function that takes a JSON date and compares it to the current date to calculate the number of seconds before a new round starts\r\n  const calculateSecondsUntilRoundStarts = (): number => {\r\n    // Calculate time until next round starts\r\n    const currentTime = Date.now()\r\n    // Get the the string of the JSONified date, create a date object with tat string and then get the value\r\n    const roundStartTime = new Date(JSON.parse(JSON.stringify(gameState.timeOfNextRound))).valueOf()\r\n    // convert to seconds, rounded up to whole number\r\n    return Math.ceil((Math.max(0, roundStartTime - currentTime)) / 1000)\r\n  }\r\n\r\n  // Component that shows the remaining time before a game starts\r\n  const GameStartCountdown = ({startTime, countdownTimer}: any) => {\r\n    const [shouldCountdownTimerBeCancelled, setShouldCountdownTimerBeCancelled] = useState(false)\r\n    useEffect(() => {\r\n      if (shouldCountdownTimerBeCancelled) {\r\n        clearInterval(countdownTimer)\r\n      }\r\n    }, [shouldCountdownTimerBeCancelled])\r\n\r\n    // If the game is starting, then stop the interval timer and get the new game state\r\n    if (startTime <= 0 && !shouldCountdownTimerBeCancelled) {\r\n      setShouldCountdownTimerBeCancelled(true)\r\n    }\r\n    return (\r\n      <div className=\"round-start mb-5\">\r\n        {gameState.isWaitingForNextRound ? `Game starting in ${startTime} seconds` : \"\"}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // The waiting area component\r\n  const WaitingArea = ({gameStartCheckId, gameState}: any) => {\r\n    const [shouldGameStartCheckIdBeCancelled, setShouldGameStartCheckIdBeCancelled] = useState(false)\r\n    // const [displayGameStartCountdown, setDisplayGameCountdown] = useState(false)\r\n    const [countdownTimer, setCountdownTimer] = useState(0)\r\n    const [startTime, setStartTime] = useState<number>(10)\r\n\r\n    useEffect(() => {\r\n      if (shouldGameStartCheckIdBeCancelled) {\r\n        clearInterval(gameStartCheckId)\r\n        const countdownTimer: any = setInterval(()=>{setStartTime(calculateSecondsUntilRoundStarts())}, 1000)\r\n        setCountdownTimer(countdownTimer)\r\n      }\r\n    }, [shouldGameStartCheckIdBeCancelled])\r\n  \r\n    // If game is waiting for players, but going to start shortly, stop interval that was looking for game state\r\n    if (gameState.isWaitingForNextRound && !shouldGameStartCheckIdBeCancelled && gameState.status === GameStatus.Waiting) {\r\n      setShouldGameStartCheckIdBeCancelled(true)\r\n    }\r\n  \r\n    if (gameState.status === GameStatus.Waiting) {\r\n      const required = (gameState.requiredToStart !== undefined && gameState.totalUsers !== undefined) ? Math.min(0, gameState.requiredToStart - gameState.totalUsers) : 0\r\n      return (\r\n        <div className=\"waiting-container\">\r\n          <div className=\"mb-3\">\r\n            {`You are Contestant #${gameState.userId}`}\r\n          </div>\r\n          <GameStartCountdown startTime={startTime} countdownTimer={countdownTimer}/>\r\n          <div className=\"d-flex\">\r\n            <div>\r\n              <Spinner animation=\"border\" role=\"status\">\r\n                <span className=\"visually-hidden\">Loading...</span>\r\n              </Spinner>\r\n            </div>\r\n            <div className=\"waiting-message\">\r\n              {`Waiting for at least ${required} more...`}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  \r\n    return null\r\n  }\r\n  \r\n  return <WaitingArea gameStartCheckId={gameStartCheckId} gameState={gameState} />\r\n}\r\n\r\nexport default Game","import React, { useCallback, useEffect, useState } from \"react\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport { NIL as NIL_UUID } from \"uuid\"\r\nimport { createNewGame } from \"../../store/game/GameActions\"\r\nimport { State } from \"../../store/store\"\r\nimport \"../../stylesheets/home.css\"\r\n\r\nconst Home = () => {\r\n  // Set up state\r\n  const dispatch = useDispatch()\r\n  const isSearchingForGame = useSelector((state: State) => state.game.isSearchingForGame)\r\n  const gameId = useSelector((state: State) => state.game.gameId)\r\n\r\n  // We found a game\r\n  if (gameId !== NIL_UUID) {\r\n    return <Navigate to={`/games/${gameId}`} />\r\n  }\r\n  \r\n  // Component that starts a game\r\n  const FindGameButton = () => {\r\n    const [requestCreateNewGame, setRequestCreateNewGame] = useState(false)\r\n    const handleClick = useCallback(() => {\r\n      setRequestCreateNewGame(true)\r\n    }, [requestCreateNewGame])\r\n\r\n    useEffect(() => {\r\n      if (requestCreateNewGame) {\r\n        dispatch(createNewGame())\r\n      }\r\n    }, [requestCreateNewGame])\r\n\r\n    return (\r\n      <Button\r\n        className=\"mt-5\"\r\n        variant=\"primary\"\r\n        size=\"lg\"\r\n        onClick={!isSearchingForGame ? () => {handleClick()} : undefined}\r\n        disabled={isSearchingForGame}\r\n      >\r\n        {isSearchingForGame ? \"Searching...\" : \"Find a Game\"}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"title mt-5\">\r\n        Welcome to the Trivia Quiz!\r\n      </div>\r\n      <div className=\"description mt-3\">\r\n        Compete with other players to see who can correctly answer the most questions.\r\n      </div>\r\n      <div className=\"description mt-3\">\r\n        Find a game below!\r\n      </div>\r\n      <FindGameButton />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home","import React from \"react\"\r\nimport { Route, Routes as R } from \"react-router-dom\"\r\nimport \"../stylesheets/index.css\"\r\nimport Game from \"./game/Game\"\r\nimport Home from \"./home/Home\"\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <div className={\"dark-mode-background\"}>\r\n      <h1>Sorry, page not found</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Routes = (): JSX.Element => {\r\n  return (\r\n    <R>\r\n      <Route \r\n        path=\"/\"\r\n        element={<Home />}\r\n      />\r\n      <Route \r\n        path=\"/games/:id\"\r\n        element={<Game />}\r\n      />\r\n      <Route path=\"*\" element={<NotFound/>} />\r\n    </R>\r\n  )\r\n}\r\n\r\nexport default Routes\r\n","import * as React from \"react\"\nimport { BrowserRouter } from \"react-router-dom\"\nimport \"../stylesheets/App.css\"\nimport Routes from \"./Routes\"\n\nconst App = (): JSX.Element => {\n  return (\n    <div className=\"App\">\n      <main>\n      <BrowserRouter>\n        <Routes />\n      </BrowserRouter>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import { NIL as NIL_UUID } from \"uuid\"\r\nimport {\r\n  CREATE_NEW_GAME_FAILED,\r\n  CREATE_NEW_GAME_REQUESTED,\r\n  CREATE_NEW_GAME_SUCCEEDED,\r\n  GameStatus,\r\n  GET_GAME_SUCCEEDED,\r\n  HomeAction\r\n} from \"./GameConstants\"\r\n\r\n\r\nconst gameReducer = (\r\n  state = {\r\n    isSearchingForGame: false,\r\n    gameId: NIL_UUID,\r\n    userId: 0,\r\n    isWaitingForNextRound: false,\r\n    timeOfNextRound: new Date(),\r\n    currentRound: 0,\r\n    currentQuestion: \"\",\r\n    currentIncorrectAnswers: [] as string[],\r\n    currentCorrectAnswer: \"\",\r\n    status: GameStatus.Unknown,\r\n    totalUsers: 0,\r\n    remainingUsers: [0],\r\n    requiredToStart: 2,\r\n  },\r\n  action: HomeAction\r\n) => {\r\n  let newState = state\r\n\r\n  switch (action.type) {\r\n    case CREATE_NEW_GAME_REQUESTED:\r\n      newState = {\r\n        ...newState,\r\n        isSearchingForGame: true,\r\n      }\r\n      break\r\n    case CREATE_NEW_GAME_SUCCEEDED:\r\n      newState = {\r\n        ...newState,\r\n        isSearchingForGame: false,\r\n        gameId: action.gameData.gameId,\r\n        userId: action.gameData.userId,\r\n        isWaitingForNextRound: action.gameData.isWaitingForNextRound,\r\n        timeOfNextRound: action.gameData.timeOfNextRound,\r\n        currentRound: action.gameData.currentRound,\r\n        currentQuestion: action.gameData.currentQuestion,\r\n        currentIncorrectAnswers: action.gameData.currentIncorrectAnswers,\r\n        currentCorrectAnswer: action.gameData.currentCorrectAnswer,\r\n        status: action.gameData.status,\r\n        totalUsers: action.gameData.totalUsers,\r\n        remainingUsers: action.gameData.remainingUsers,\r\n        requiredToStart: action.gameData.requiredToStart,\r\n\r\n      }\r\n      break\r\n    case GET_GAME_SUCCEEDED:\r\n      newState = {\r\n        ...newState,\r\n        isSearchingForGame: false,\r\n        gameId: action.gameData.gameId,\r\n        isWaitingForNextRound: action.gameData.isWaitingForNextRound,\r\n        timeOfNextRound: action.gameData.timeOfNextRound,\r\n        currentRound: action.gameData.currentRound,\r\n        currentQuestion: action.gameData.currentQuestion,\r\n        currentIncorrectAnswers: action.gameData.currentIncorrectAnswers,\r\n        currentCorrectAnswer: action.gameData.currentCorrectAnswer,\r\n        status: action.gameData.status,\r\n        totalUsers: action.gameData.totalUsers,\r\n        remainingUsers: action.gameData.remainingUsers,\r\n        requiredToStart: action.gameData.requiredToStart,\r\n\r\n      }\r\n      break\r\n    case CREATE_NEW_GAME_FAILED:\r\n      newState = {\r\n        ...newState,\r\n        isSearchingForGame: false,\r\n        gameId: NIL_UUID,\r\n        userId: 0,\r\n        isWaitingForNextRound: false,\r\n        timeOfNextRound: new Date(),\r\n        currentRound: 0,\r\n        currentQuestion: \"\",\r\n        currentIncorrectAnswers: [] as string[],\r\n        currentCorrectAnswer: \"\",\r\n        status: GameStatus.Unknown,\r\n        totalUsers: 0,\r\n        remainingUsers: [0],\r\n        requiredToStart: 2\r\n      }\r\n      break\r\n  }\r\n  return newState\r\n}\r\n\r\nexport default gameReducer","import { combineReducers } from \"redux\"\r\nimport gameReducer from \"./game/GameReducer\"\r\n\r\nexport default combineReducers({\r\n  game: gameReducer,\r\n})\r\n","import { NIL as NIL_UUID } from \"uuid\"\r\nimport configureStore from \"./configureStore\"\r\nimport { GameStatus } from \"./game/GameConstants\"\r\n\r\nexport interface State {\r\n  game: {\r\n    isSearchingForGame: boolean\r\n    gameId: string\r\n    userId: number\r\n    isWaitingForNextRound: boolean\r\n    timeOfNextRound: Date\r\n    currentRound: number\r\n    currentQuestion: string\r\n    currentIncorrectAnswers: string[]\r\n    currentCorrectAnswer: string\r\n    status: GameStatus\r\n    totalUsers: number\r\n    remainingUsers: number[]\r\n    requiredToStart: number\r\n  }\r\n}\r\n\r\nconst initialState: State = {\r\n  game: {\r\n    isSearchingForGame: false,\r\n    gameId: NIL_UUID,\r\n    userId: 0,\r\n    isWaitingForNextRound: false,\r\n    timeOfNextRound: new Date(),\r\n    currentRound: 0,\r\n    currentQuestion: \"\",\r\n    currentIncorrectAnswers: [] as string[],\r\n    currentCorrectAnswer: \"\",\r\n    status: GameStatus.Unknown,\r\n    totalUsers: 0,\r\n    remainingUsers: [0],\r\n    requiredToStart: 2\r\n  }\r\n}\r\n\r\nexport const store = configureStore(initialState)","import { applyMiddleware, createStore } from \"redux\"\r\nimport { composeWithDevTools } from \"redux-devtools-extension\"\r\nimport thunk from \"redux-thunk\"\r\nimport combineReducers from \"./index\"\r\nimport { State } from \"./store\"\r\n\r\nexport default function configureStore(initialState: State) {\r\n  return createStore(combineReducers, initialState, composeWithDevTools(applyMiddleware(thunk)))\r\n}","import \"bootstrap/dist/css/bootstrap.min.css\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport App from \"./components/App\"\nimport { store } from \"./store/store\"\nimport \"./stylesheets/index.css\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}