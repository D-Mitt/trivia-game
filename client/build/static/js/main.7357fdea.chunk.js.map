{"version":3,"sources":["store/game/GameConstants.tsx","constants.tsx","store/game/GameActions.tsx","components/game/Game.tsx","components/home/Home.tsx","components/Routes.tsx","components/App.tsx","store/game/GameReducer.tsx","store/index.tsx","store/store.tsx","store/configureStore.tsx","index.tsx"],"names":["GameStatus","BASE_URL","process","CREATE_NEW_SOLO_GAME_REQUESTED","CREATE_NEW_SOLO_GAME_SUCCEEDED","CREATE_NEW_SOLO_GAME_FAILED","JOIN_MULTIPLAYER_GAME_REQUESTED","JOIN_MULTIPLAYER_GAME_SUCCEEDED","JOIN_MULTIPLAYER_GAME_FAILED","GET_GAME_SUCCEEDED","UPDATE_REMAINING_PLAYERS_REQUESTED","UPDATE_REMAINING_PLAYERS_SUCCEEDED","UPDATE_REMAINING_PLAYERS_FAILED","SELECTED_ANSWER_SET","Game","gameState","useSelector","state","game","dispatch","useDispatch","useState","gameStartCheckId","setGameStartCheckId","useEffect","check","setInterval","fetchGame","clearInterval","gameId","a","type","axios","get","response","gameData","data","calculateSecondsUntilDate","date","currentTime","Date","now","roundStartTime","JSON","parse","stringify","valueOf","Math","ceil","max","GameStartCountdown","startTime","countdownTimer","shouldCountdownTimerBeCancelled","setShouldCountdownTimerBeCancelled","plural","className","isWaitingForNextRound","WaitingArea","shouldGameStartCheckIdBeCancelled","setShouldGameStartCheckIdBeCancelled","setCountdownTimer","isSolo","setStartTime","timeOfNextRound","required","undefined","requiredToStart","totalUsers","userId","Spinner","animation","role","TimeToAnswerCountdown","hasSubmittedAnswer","Answers","selectedAnswer","setSelectedAnswer","handleChange","event","target","id","substr","toDisplay","allCurrentAnswersShuffled","forEach","answer","index","answerBorder","currentCorrectAnswer","push","Form","Check","label","disabled","onChange","checked","UpdateRemainingPlayersButton","requestUpdateRemainingPlayers","setRequestUpdateRemainingPlayers","isCorrect","post","updateRemainingPlayers","Button","variant","size","onClick","isUpdatingRemainingPlayers","QuestionArea","currentRound","currentQuestion","EndScreen","HomeButton","href","hasPlayerWon","status","Waiting","Started","hasPlayerLost","Done","Home","isSearchingForGame","isCreatingSoloGame","NIL_UUID","to","FindGameButton","classes","requestJoinMultiplayerGame","setRequestJoinMultiplayerGame","handleClick","useCallback","body","SoloGameButton","requestCreateNewSoloGame","setRequestCreateNewSoloGame","NotFound","Routes","path","element","App","shuffle","array","randomIndex","currentIndex","length","floor","random","checkIfPlayerLost","remainingPlayers","findIndex","playerId","checkIfPlayerWon","gameReducer","currentIncorrectAnswers","Unknown","remainingUsers","action","newState","combineReducers","initialState","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7357fdea.chunk.js","sourcesContent":["\r\nexport const CREATE_NEW_SOLO_GAME_REQUESTED = \"CREATE_NEW_SOLO_GAME_REQUESTED\"\r\nexport type CREATE_NEW_SOLO_GAME_REQUESTED = typeof CREATE_NEW_SOLO_GAME_REQUESTED\r\n\r\nexport const CREATE_NEW_SOLO_GAME_SUCCEEDED = \"CREATE_NEW_SOLO_GAME_SUCCEEDED\"\r\nexport type CREATE_NEW_SOLO_GAME_SUCCEEDED = typeof CREATE_NEW_SOLO_GAME_SUCCEEDED\r\n\r\nexport const CREATE_NEW_SOLO_GAME_FAILED = \"CREATE_NEW_SOLO_GAME_FAILED\"\r\nexport type CREATE_NEW_SOLO_GAME_FAILED = typeof CREATE_NEW_SOLO_GAME_FAILED\r\n\r\nexport const JOIN_MULTIPLAYER_GAME_REQUESTED = \"JOIN_MULTIPLAYER_GAME_REQUESTED\"\r\nexport type JOIN_MULTIPLAYER_GAME_REQUESTED = typeof JOIN_MULTIPLAYER_GAME_REQUESTED\r\n\r\nexport const JOIN_MULTIPLAYER_GAME_SUCCEEDED = \"JOIN_MULTIPLAYER_GAME_SUCCEEDED\"\r\nexport type JOIN_MULTIPLAYER_GAME_SUCCEEDED = typeof JOIN_MULTIPLAYER_GAME_SUCCEEDED\r\n\r\nexport const JOIN_MULTIPLAYER_GAME_FAILED = \"JOIN_MULTIPLAYER_GAME_FAILED\"\r\nexport type JOIN_MULTIPLAYER_GAME_FAILED = typeof JOIN_MULTIPLAYER_GAME_FAILED\r\n\r\nexport const GET_GAME_REQUESTED = \"GET_GAME_REQUESTED\"\r\nexport type GET_GAME_REQUESTED = typeof GET_GAME_REQUESTED\r\n\r\nexport const GET_GAME_SUCCEEDED = \"GET_GAME_SUCCEEDED\"\r\nexport type GET_GAME_SUCCEEDED = typeof GET_GAME_SUCCEEDED\r\n\r\nexport const GET_GAME_FAILED = \"GET_GAME_FAILED\"\r\nexport type GET_GAME_FAILED = typeof GET_GAME_FAILED\r\n\r\nexport const UPDATE_REMAINING_PLAYERS_REQUESTED = \"UPDATE_REMAINING_PLAYERS_REQUESTED\"\r\nexport type UPDATE_REMAINING_PLAYERS_REQUESTED = typeof UPDATE_REMAINING_PLAYERS_REQUESTED\r\n\r\nexport const UPDATE_REMAINING_PLAYERS_SUCCEEDED = \"UPDATE_REMAINING_PLAYERS_SUCCEEDED\"\r\nexport type UPDATE_REMAINING_PLAYERS_SUCCEEDED = typeof UPDATE_REMAINING_PLAYERS_SUCCEEDED\r\n\r\nexport const UPDATE_REMAINING_PLAYERS_FAILED = \"UPDATE_REMAINING_PLAYERS_FAILED\"\r\nexport type UPDATE_REMAINING_PLAYERS_FAILED = typeof UPDATE_REMAINING_PLAYERS_FAILED\r\n\r\nexport const SELECTED_ANSWER_SET = \"SELECTED_ANSWER_SET\"\r\nexport type SELECTED_ANSWER_SET = typeof SELECTED_ANSWER_SET\r\n\r\nexport enum GameStatus {\r\n  Done = \"DONE\",\r\n  Unknown = \"UNKNOWN\",\r\n  Started = \"STARTED\",\r\n  Waiting = \"WAITING\",\r\n}\r\n\r\nexport interface GameData {\r\n  gameId: string\r\n  userId: number\r\n  isWaitingForNextRound: boolean\r\n  timeOfNextRound: Date\r\n  currentRound: number\r\n  currentQuestion: string\r\n  currentIncorrectAnswers: string[]\r\n  currentCorrectAnswer: string\r\n  allCurrentAnswersShuffled: string[]\r\n  status: GameStatus\r\n  totalUsers: number\r\n  remainingUsers: number[]\r\n  requiredToStart: number\r\n  isUpdatingRemainingPlayers: boolean\r\n  isSolo: boolean\r\n}\r\n\r\nexport interface CreateNewSoloGameRequested {\r\n  type: CREATE_NEW_SOLO_GAME_REQUESTED\r\n}\r\n\r\nexport interface CreateNewSoloGameSucceeded {\r\n  type: CREATE_NEW_SOLO_GAME_SUCCEEDED\r\n  gameData: GameData\r\n}\r\n\r\nexport interface CreateNewSoloGameFailed {\r\n  type: CREATE_NEW_SOLO_GAME_FAILED\r\n}\r\n\r\nexport interface JoinMultiplayerGameRequested {\r\n  type: JOIN_MULTIPLAYER_GAME_REQUESTED\r\n}\r\n\r\nexport interface JoinMultiplayerGameSucceeded {\r\n  type: JOIN_MULTIPLAYER_GAME_SUCCEEDED\r\n  gameData: GameData\r\n}\r\n\r\nexport interface JoinMultiplayerGameFailed {\r\n  type: JOIN_MULTIPLAYER_GAME_FAILED\r\n}\r\n\r\nexport interface GetGameRequested {\r\n  type: GET_GAME_REQUESTED\r\n}\r\n\r\nexport interface GetGameSucceeded {\r\n  type: GET_GAME_SUCCEEDED\r\n  gameData: GameData\r\n}\r\n\r\nexport interface GetGameFailed {\r\n  type: GET_GAME_FAILED\r\n}\r\n\r\nexport interface UpdateRemainingPlayersRequested {\r\n  type: UPDATE_REMAINING_PLAYERS_REQUESTED\r\n}\r\n\r\nexport interface UpdateRemainingPlayersSucceeded {\r\n  type: UPDATE_REMAINING_PLAYERS_SUCCEEDED\r\n}\r\n\r\nexport interface UpdateRemainingPlayersFailed {\r\n  type: UPDATE_REMAINING_PLAYERS_FAILED\r\n}\r\n\r\nexport interface SelectedAnswerSet {\r\n  type: SELECTED_ANSWER_SET\r\n  answer: string\r\n}\r\n\r\nexport type GameAction =\r\n| CreateNewSoloGameRequested\r\n| CreateNewSoloGameSucceeded\r\n| CreateNewSoloGameFailed\r\n| JoinMultiplayerGameRequested\r\n| JoinMultiplayerGameSucceeded\r\n| JoinMultiplayerGameFailed\r\n| GetGameRequested\r\n| GetGameSucceeded\r\n| GetGameFailed\r\n| UpdateRemainingPlayersRequested\r\n| UpdateRemainingPlayersSucceeded\r\n| UpdateRemainingPlayersFailed\r\n| SelectedAnswerSet","let baseUrl = \"\"\r\nif (process.env.REACT_APP_API_BASE_URL) {\r\n  baseUrl = process.env.REACT_APP_API_BASE_URL\r\n}\r\n\r\nexport const BASE_URL = baseUrl\r\n","import axios from \"axios\"\r\nimport { Dispatch } from \"redux\"\r\nimport { BASE_URL } from \"../../constants\"\r\nimport {\r\n  CreateNewSoloGameFailed,\r\n  CreateNewSoloGameRequested,\r\n  CreateNewSoloGameSucceeded,\r\n  CREATE_NEW_SOLO_GAME_FAILED,\r\n  CREATE_NEW_SOLO_GAME_REQUESTED,\r\n  CREATE_NEW_SOLO_GAME_SUCCEEDED, GameAction, GameData,\r\n  GetGameFailed,\r\n  GetGameRequested,\r\n  GetGameSucceeded,\r\n  GET_GAME_FAILED,\r\n  GET_GAME_REQUESTED,\r\n  GET_GAME_SUCCEEDED, JoinMultiplayerGameFailed, JoinMultiplayerGameRequested, JoinMultiplayerGameSucceeded, JOIN_MULTIPLAYER_GAME_FAILED, JOIN_MULTIPLAYER_GAME_REQUESTED, JOIN_MULTIPLAYER_GAME_SUCCEEDED, SelectedAnswerSet, SELECTED_ANSWER_SET, UpdateRemainingPlayersFailed,\r\n  UpdateRemainingPlayersRequested,\r\n  UpdateRemainingPlayersSucceeded, UPDATE_REMAINING_PLAYERS_FAILED,\r\n  UPDATE_REMAINING_PLAYERS_REQUESTED,\r\n  UPDATE_REMAINING_PLAYERS_SUCCEEDED\r\n} from \"./GameConstants\"\r\n\r\nexport const createNewSoloGameRequested = (): CreateNewSoloGameRequested => {\r\n  return {\r\n    type: CREATE_NEW_SOLO_GAME_REQUESTED,\r\n  }\r\n}\r\n\r\nexport const createNewSoloGameSucceeded = (gameData: GameData): CreateNewSoloGameSucceeded => {\r\n  return {\r\n    type: CREATE_NEW_SOLO_GAME_SUCCEEDED,\r\n    gameData: gameData,\r\n  }\r\n}\r\n\r\nexport const createNewSoloGameFailed = (): CreateNewSoloGameFailed => {\r\n  return {\r\n    type: CREATE_NEW_SOLO_GAME_FAILED,\r\n  }\r\n}\r\n\r\nexport const joinMultiplayerGameRequested = (): JoinMultiplayerGameRequested => {\r\n  return {\r\n    type: JOIN_MULTIPLAYER_GAME_REQUESTED,\r\n  }\r\n}\r\n\r\nexport const joinMultiplayerGameSucceeded = (gameData: GameData): JoinMultiplayerGameSucceeded => {\r\n  return {\r\n    type: JOIN_MULTIPLAYER_GAME_SUCCEEDED,\r\n    gameData: gameData,\r\n  }\r\n}\r\n\r\nexport const joinMultiplayerGameFailed = (): JoinMultiplayerGameFailed => {\r\n  return {\r\n    type: JOIN_MULTIPLAYER_GAME_FAILED,\r\n  }\r\n}\r\n\r\nexport const getGameRequested = (): GetGameRequested => {\r\n  return {\r\n    type: GET_GAME_REQUESTED,\r\n  }\r\n}\r\n\r\nexport const getGameSucceeded = (gameData: GameData): GetGameSucceeded => {\r\n  return {\r\n    type: GET_GAME_SUCCEEDED,\r\n    gameData: gameData,\r\n  }\r\n}\r\n\r\nexport const getGameFailed = (): GetGameFailed => {\r\n  return {\r\n    type: GET_GAME_FAILED,\r\n  }\r\n}\r\n\r\nexport const updateRemainingPlayersRequested = (): UpdateRemainingPlayersRequested => {\r\n  return {\r\n    type: UPDATE_REMAINING_PLAYERS_REQUESTED,\r\n  }\r\n}\r\n\r\nexport const updateRemainingPlayersSucceeded = (): UpdateRemainingPlayersSucceeded => {\r\n  return {\r\n    type: UPDATE_REMAINING_PLAYERS_SUCCEEDED,\r\n  }\r\n}\r\n\r\nexport const updateRemainingPlayersFailed = (): UpdateRemainingPlayersFailed => {\r\n  return {\r\n    type: UPDATE_REMAINING_PLAYERS_FAILED,\r\n  }\r\n}\r\n\r\nexport const selectedAnswerSet = (answer: string): SelectedAnswerSet => {\r\n  return {\r\n    type: SELECTED_ANSWER_SET,\r\n    answer: answer\r\n  }\r\n}\r\n\r\nexport const createNewSoloGame = () => {\r\n  return async (dispatch: Dispatch<GameAction>) => {\r\n    dispatch(createNewSoloGameRequested())\r\n    try {\r\n      // Could be filled with game config in future updates\r\n      const body = {}\r\n      const response = await axios.post(`${BASE_URL}/soloGames`, body)\r\n      dispatch(createNewSoloGameSucceeded(response.data))\r\n    } catch (error) {\r\n      dispatch(createNewSoloGameFailed())\r\n    }\r\n  }\r\n}\r\n\r\nexport const joinMultiplayerGame = () => {\r\n  return async (dispatch: Dispatch<GameAction>) => {\r\n    dispatch(joinMultiplayerGameRequested())\r\n    try {\r\n      // Could be filled with game config in future updates\r\n      const body = {}\r\n      const response = await axios.post(`${BASE_URL}/games`, body)\r\n      dispatch(joinMultiplayerGameSucceeded(response.data))\r\n    } catch (error) {\r\n      dispatch(joinMultiplayerGameFailed())\r\n    }\r\n  }\r\n}\r\n\r\nexport const getGame = (gameId: string) => {\r\n  return async (dispatch: Dispatch<GameAction>) => {\r\n    dispatch(getGameRequested())\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/games/${gameId}`)\r\n      dispatch(getGameSucceeded(response.data))\r\n    } catch (error) {\r\n      dispatch(getGameFailed())\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateRemainingPlayers = (gameId: string, userId: number, isCorrect: boolean) => {\r\n  return async (dispatch: Dispatch<GameAction>) => {\r\n    dispatch(updateRemainingPlayersRequested())\r\n    try {\r\n      if (isCorrect) {\r\n        await axios.post(`${BASE_URL}/games/${gameId}/remainingPlayers/${userId}`, {})\r\n      }\r\n      dispatch(updateRemainingPlayersSucceeded())\r\n    } catch (error) {\r\n      dispatch(updateRemainingPlayersFailed())\r\n    }\r\n  }\r\n}","import parse from \"html-react-parser\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport Form from \"react-bootstrap/Form\"\r\nimport Spinner from \"react-bootstrap/Spinner\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { BASE_URL } from \"../../constants\"\r\nimport { getGame, updateRemainingPlayers } from \"../../store/game/GameActions\"\r\nimport { GameStatus } from \"../../store/game/GameConstants\"\r\nimport { State } from \"../../store/store\"\r\nimport \"../../stylesheets/game.css\"\r\n\r\n// Main game view\r\nconst Game = () => {\r\n  // Set up game state\r\n  const gameState = useSelector((state: State) => state.game)\r\n  const dispatch = useDispatch()\r\n  // const navigate = useNavigate()\r\n  const [gameStartCheckId, setGameStartCheckId] = useState(0)\r\n\r\n  // On component mount, start interval that checks for game state/status\r\n  useEffect(() => {\r\n      /* eslint-disable  @typescript-eslint/no-explicit-any */\r\n    const check: any = setInterval(()=>{fetchGame()}, 2000)\r\n    setGameStartCheckId(check)\r\n    return (() => {\r\n      clearInterval(gameStartCheckId)\r\n    })\r\n  }, [])\r\n  \r\n  // Start polling to see if game is going to start\r\n  const fetchGame = () => {\r\n    dispatch(getGame(gameState.gameId))\r\n  }\r\n\r\n  // Helper function that takes a JSON date and compares it to the current date to calculate the number of seconds before a new round starts\r\n  const calculateSecondsUntilDate = (date: Date): number => {\r\n    const currentTime = Date.now()\r\n    // Get the the string of the JSONified date, create a date object with that string and then get the value\r\n    const roundStartTime = new Date(JSON.parse(JSON.stringify(date))).valueOf()\r\n    // convert to seconds, rounded up to whole number\r\n    return Math.ceil((Math.max(0, roundStartTime - currentTime)) / 1000)\r\n  }\r\n\r\n  // Component that shows the remaining time before a game starts\r\n  const GameStartCountdown = ({startTime, countdownTimer}: any) => {\r\n    const [shouldCountdownTimerBeCancelled, setShouldCountdownTimerBeCancelled] = useState(false)\r\n    useEffect(() => {\r\n      if (shouldCountdownTimerBeCancelled) {\r\n        clearInterval(countdownTimer)\r\n        fetchGame()\r\n      }\r\n    }, [shouldCountdownTimerBeCancelled])\r\n\r\n    // If the game is starting, then stop the interval timer and get the new game state\r\n    if (startTime <= 0 && !shouldCountdownTimerBeCancelled) {\r\n      setShouldCountdownTimerBeCancelled(true)\r\n    }\r\n    let plural = \"seconds\"\r\n    if (startTime === 1) {\r\n      plural = \"second\"\r\n    }\r\n    return (\r\n      <div className=\"alerting mb-5\">\r\n        {gameState.isWaitingForNextRound ? `Game starting in ${startTime} ${plural}` : \"\"}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // The waiting area component\r\n  const WaitingArea = ({gameStartCheckId}: any) => {\r\n    const [shouldGameStartCheckIdBeCancelled, setShouldGameStartCheckIdBeCancelled] = useState(false)\r\n    const [countdownTimer, setCountdownTimer] = useState(0)\r\n    const [startTime, setStartTime] = useState<number>(gameState.isSolo ? 5 : 12)\r\n\r\n    // Clear the game start timer and start the round timer\r\n    useEffect(() => {\r\n      if (shouldGameStartCheckIdBeCancelled) {\r\n        clearInterval(gameStartCheckId)\r\n        const countdownTimer: any = setInterval(()=>{setStartTime(calculateSecondsUntilDate(gameState.timeOfNextRound))}, 1000)\r\n        setCountdownTimer(countdownTimer)\r\n      }\r\n      return () => {\r\n        clearInterval(countdownTimer)\r\n      }\r\n    }, [shouldGameStartCheckIdBeCancelled])\r\n  \r\n    const required = (gameState.requiredToStart !== undefined && gameState.totalUsers !== undefined) ? Math.max(0, gameState.requiredToStart - gameState.totalUsers) : 0\r\n\r\n    // If game is waiting for players, but going to start shortly, stop interval that was looking for game state\r\n    if (gameState.isWaitingForNextRound && required === 0 && !shouldGameStartCheckIdBeCancelled) {\r\n      setShouldGameStartCheckIdBeCancelled(true)\r\n    }\r\n  \r\n    return (\r\n      <div className=\"waiting-container\">\r\n        <div className=\"mb-3\">\r\n          {`You are Player #${gameState.userId}`}\r\n        </div>\r\n        <GameStartCountdown startTime={startTime} countdownTimer={countdownTimer}/>\r\n        {\r\n          gameState.isSolo ?\r\n          <div className=\"waiting-message\">\r\n            Enjoy your solo game!\r\n          </div>\r\n          :\r\n          <div className=\"d-flex\">\r\n            <div>\r\n              <Spinner animation=\"border\" role=\"status\">\r\n                <span className=\"visually-hidden\">Loading...</span>\r\n              </Spinner>\r\n            </div>\r\n            <div className=\"waiting-message\">\r\n              {required === 0 ? \"Waiting for any stragglers...\" : `Waiting for at least ${required} more...`}\r\n            </div>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Component that shows the remaining time before a game starts\r\n  const TimeToAnswerCountdown = ({startTime, countdownTimer}: any) => {\r\n    const [shouldCountdownTimerBeCancelled, setShouldCountdownTimerBeCancelled] = useState(false)\r\n    useEffect(() => {\r\n      if (shouldCountdownTimerBeCancelled) {\r\n        clearInterval(countdownTimer)\r\n        fetchGame()\r\n      }\r\n    }, [shouldCountdownTimerBeCancelled])\r\n\r\n    // If theround is over, then stop the interval timer and get the new game state\r\n    if (startTime <= 0 && !shouldCountdownTimerBeCancelled) {\r\n      setShouldCountdownTimerBeCancelled(true)\r\n    }\r\n    let plural = \"seconds\"\r\n    if (startTime === 1) {\r\n      plural = \"second\"\r\n    }\r\n\r\n    if (gameState.hasSubmittedAnswer) {\r\n      return (\r\n        <div className=\"alerting mb-5\">\r\n        {`${startTime} ${plural} until the round is over!`}\r\n      </div>\r\n      )\r\n    }\r\n\r\n    // TODO: potentially change color based on how much time is left\r\n    return (\r\n      <div className=\"alerting mb-5\">\r\n        {`${startTime} ${plural} left to answer!`}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const Answers = () => {\r\n    // default to none of the choices selected\r\n    const [selectedAnswer, setSelectedAnswer] = useState(\"\")\r\n    const handleChange = (event: any) => {\r\n      // remove 'answer-' from the string\r\n      setSelectedAnswer((event.target.id as string).substr(7))\r\n    }\r\n\r\n    const toDisplay: any[] = []\r\n    gameState.allCurrentAnswersShuffled.forEach((answer: string, index: number) => {\r\n\r\n      // determine whether to show correct/incorrect answers\r\n      let answerBorder = \"\"\r\n      if (gameState.hasSubmittedAnswer) {\r\n        answerBorder = \"answer-border-wrong\"\r\n        if (answer === gameState.currentCorrectAnswer) {\r\n          answerBorder = \"answer-border-correct\"\r\n        }\r\n      }\r\n\r\n      toDisplay.push(\r\n        <div key={`answer-${index}`} className={`${answerBorder} mb-3 px-3`}>\r\n          <Form.Check \r\n            type=\"radio\"\r\n            id={`answer-${index}`}\r\n            label={`${parse(answer)}`}\r\n            className=\"answer\"\r\n            disabled={gameState.hasSubmittedAnswer}\r\n            onChange={handleChange}\r\n            checked={selectedAnswer === `${index}`}\r\n          />\r\n        </div>\r\n      )\r\n    })\r\n    return (\r\n      <>\r\n        <Form>\r\n          <div key={\"answer-form\"}>\r\n            {toDisplay}\r\n          </div>\r\n        </Form>\r\n        <UpdateRemainingPlayersButton selectedAnswer={selectedAnswer} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  // Used when the player submits an answer\r\n  const UpdateRemainingPlayersButton = ({selectedAnswer}: any) => {\r\n    const [requestUpdateRemainingPlayers, setRequestUpdateRemainingPlayers] = useState(false)\r\n    const handleClick = () => {\r\n      setRequestUpdateRemainingPlayers(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n      // Only keep the player if it is the correct answer\r\n      const isCorrect = gameState.allCurrentAnswersShuffled[selectedAnswer] === gameState.currentCorrectAnswer\r\n\r\n      if (requestUpdateRemainingPlayers) {\r\n        dispatch(updateRemainingPlayers(gameState.gameId, gameState.userId, isCorrect))\r\n      }\r\n    }, [requestUpdateRemainingPlayers])\r\n\r\n    return (\r\n      <Button\r\n        className=\"mt-5\"\r\n        variant=\"success\"\r\n        size=\"lg\"\r\n        onClick={!gameState.hasSubmittedAnswer ? () => {handleClick()} : undefined}\r\n        disabled={gameState.hasSubmittedAnswer}\r\n      >\r\n        {gameState.isUpdatingRemainingPlayers ? \"Submitting...\" : \"Submit Answer\"}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  // The question area component\r\n  const QuestionArea = () => {\r\n    const [countdownTimer, setCountdownTimer] = useState(0)\r\n    const [startTime, setStartTime] = useState<number>(12)\r\n\r\n    useEffect(() => {\r\n        const countdownTimer: any = setInterval(()=>{setStartTime(calculateSecondsUntilDate(gameState.timeOfNextRound))}, 1000)\r\n        setCountdownTimer(countdownTimer)\r\n        return () => {\r\n          clearInterval(countdownTimer)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n      <div className=\"waiting-container\">\r\n        <div>\r\n          {`Round ${gameState.currentRound}`}\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          {`${parse(gameState.currentQuestion)}`}\r\n        </div>\r\n        <TimeToAnswerCountdown startTime={startTime} countdownTimer={countdownTimer}/>\r\n        <Answers />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Displays the win or lose screen\r\n  const EndScreen = () => {    \r\n    const HomeButton = () => {\r\n\r\n      return (\r\n        <Button\r\n          className=\"mt-5\"\r\n          variant=\"success\"\r\n          size=\"lg\"\r\n          href={BASE_URL}\r\n        >\r\n          Home\r\n        </Button>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {gameState.hasPlayerWon ? \r\n        <div className=\"mt-5 win\">\r\n          Congratulations, you won!\r\n        </div>\r\n        :\r\n        <div className=\"mt-5 alerting\">\r\n          Oh no, you lost!\r\n        </div>}\r\n        <div className=\"description mt-3\">\r\n          Play again?\r\n        </div>\r\n        <HomeButton />\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  if (gameState.status === GameStatus.Waiting) {\r\n    return <WaitingArea gameStartCheckId={gameStartCheckId} />\r\n  } else if (gameState.status === GameStatus.Started && (!gameState.hasPlayerLost || gameState.currentRound <= 1)) {\r\n    // On first round, playerLost is false and round is 1, so we still want to come in here. After that, if the player gets a question wrong, we want to end the game\r\n    return <QuestionArea />\r\n  } else   if (gameState.status === GameStatus.Done || gameState.hasPlayerLost) {\r\n    // Assumption is that if player won, game will be in the done state.\r\n    // You can lose, but the game will still continue on for others\r\n    return <EndScreen />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport default Game","import React, { useCallback, useEffect, useState } from \"react\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport { NIL as NIL_UUID } from \"uuid\"\r\nimport { createNewSoloGame, joinMultiplayerGame } from \"../../store/game/GameActions\"\r\nimport { State } from \"../../store/store\"\r\nimport \"../../stylesheets/home.css\"\r\n\r\n// The landing page of the app\r\nconst Home = () => {\r\n  // Set up state\r\n  const dispatch = useDispatch()\r\n  const isSearchingForGame = useSelector((state: State) => state.game.isSearchingForGame)\r\n  const isCreatingSoloGame = useSelector((state: State) => state.game.isCreatingSoloGame)\r\n  const gameId = useSelector((state: State) => state.game.gameId)\r\n\r\n  // We found a game\r\n  if (gameId !== NIL_UUID) {\r\n    return <Navigate to={`/games/${gameId}`} />\r\n  }\r\n  \r\n  // Component that finds or starts a new multiplayer game\r\n  const FindGameButton = ({classes}: any) => {\r\n    const [requestJoinMultiplayerGame, setRequestJoinMultiplayerGame] = useState(false)\r\n    const handleClick = useCallback(() => {\r\n      setRequestJoinMultiplayerGame(true)\r\n    }, [requestJoinMultiplayerGame])\r\n\r\n    useEffect(() => {\r\n      if (requestJoinMultiplayerGame) {\r\n        dispatch(joinMultiplayerGame())\r\n      }\r\n    }, [requestJoinMultiplayerGame])\r\n\r\n    return (\r\n      <Button\r\n        className={`${classes} mt-5`}\r\n        variant=\"success\"\r\n        size=\"lg\"\r\n        onClick={!isSearchingForGame ? () => {handleClick()} : undefined}\r\n        disabled={isSearchingForGame || isCreatingSoloGame}\r\n      >\r\n        {isSearchingForGame ? \"Searching...\" : \"Find a Game\"}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  // Component that starts a solo game\r\n  const SoloGameButton = ({classes}: any) => {\r\n    const [requestCreateNewSoloGame, setRequestCreateNewSoloGame] = useState(false)\r\n    const handleClick = useCallback(() => {\r\n      setRequestCreateNewSoloGame(true)\r\n    }, [requestCreateNewSoloGame])\r\n\r\n    useEffect(() => {\r\n      if (requestCreateNewSoloGame) {\r\n        dispatch(createNewSoloGame())\r\n      }\r\n    }, [requestCreateNewSoloGame])\r\n\r\n    return (\r\n      <Button\r\n        className={`${classes} mt-5`}\r\n        variant=\"success\"\r\n        size=\"lg\"\r\n        onClick={!isCreatingSoloGame ? () => {handleClick()} : undefined}\r\n        disabled={isSearchingForGame || isCreatingSoloGame}\r\n      >\r\n        {isCreatingSoloGame ? \"Creating...\" : \"Solo Game\"}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"title mt-5\">\r\n        Welcome to the Trivia Quiz!\r\n      </div>\r\n      <div className=\"description mt-3\">\r\n        Compete with other players to see who can correctly answer the most questions.\r\n      </div>\r\n      <div className=\"description mt-3\">\r\n        Find a game below!\r\n      </div>\r\n      <div>\r\n        <FindGameButton classes={\"first-button\"} />\r\n        <SoloGameButton classes={\"\"} />\r\n      </div>\r\n      <ul className=\"rules mt-5 mx-3 d-flex\">\r\n        <li>When the game begins, you will have 12 seconds to answer a multiple choice question.</li>\r\n        <li>After submitting your answer the correct answer will be displayed in <span className=\"green\">green</span>.</li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home","import React from \"react\"\r\nimport { Route, Routes as R } from \"react-router-dom\"\r\nimport \"../stylesheets/index.css\"\r\nimport Game from \"./game/Game\"\r\nimport Home from \"./home/Home\"\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <div className=\"mt-5 dark-mode-background\">\r\n      <h1>Sorry, page not found</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Routes = (): JSX.Element => {\r\n  return (\r\n    <R>\r\n      <Route \r\n        path=\"/\"\r\n        element={<Home />}\r\n      />\r\n      <Route \r\n        path=\"/games/:id\"\r\n        element={<Game />}\r\n      />\r\n      <Route path=\"*\" element={<NotFound/>} />\r\n    </R>\r\n  )\r\n}\r\n\r\nexport default Routes\r\n","import * as React from \"react\"\nimport { BrowserRouter } from \"react-router-dom\"\nimport \"../stylesheets/App.css\"\nimport Routes from \"./Routes\"\n\nconst App = (): JSX.Element => {\n  return (\n    <div className=\"App\">\n      <main>\n      <BrowserRouter>\n        <Routes />\n      </BrowserRouter>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import { NIL as NIL_UUID } from \"uuid\"\r\nimport {\r\n  CREATE_NEW_SOLO_GAME_FAILED,\r\n  CREATE_NEW_SOLO_GAME_REQUESTED,\r\n  CREATE_NEW_SOLO_GAME_SUCCEEDED, GameAction, GameStatus,\r\n  GET_GAME_SUCCEEDED, JOIN_MULTIPLAYER_GAME_FAILED, JOIN_MULTIPLAYER_GAME_REQUESTED, JOIN_MULTIPLAYER_GAME_SUCCEEDED, SELECTED_ANSWER_SET,\r\n  UPDATE_REMAINING_PLAYERS_FAILED,\r\n  UPDATE_REMAINING_PLAYERS_REQUESTED,\r\n  UPDATE_REMAINING_PLAYERS_SUCCEEDED\r\n} from \"./GameConstants\"\r\n\r\n// Fisher-Yates shuffle algorithm found here: http://sedition.com/perl/javascript-fy.html\r\nconst shuffle = (array: string[]) => {\r\n  let currentIndex = array.length,  randomIndex\r\n\r\n  // While there remain elements to shuffle...\r\n  while (currentIndex != 0) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex)\r\n    currentIndex--\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex], array[currentIndex]]\r\n  }\r\n\r\n  return array\r\n}\r\n\r\n// Checking if player lost\r\n// It is a loss if userId can not be found in the remaining Users\r\nconst checkIfPlayerLost = (remainingPlayers: number[], userId: number): boolean => {\r\n  return remainingPlayers.findIndex((playerId: number) => {\r\n    return playerId === userId\r\n  }) === -1\r\n}\r\n\r\n// Checking if player won\r\n// It is a win if userId is the only id left in the array\r\nconst checkIfPlayerWon = (remainingPlayers: number[], userId: number): boolean => {\r\n  return remainingPlayers.length === 1 && remainingPlayers[0] === userId\r\n}\r\n\r\nconst gameReducer = (\r\n  state = {\r\n    isSearchingForGame: false,\r\n    isCreatingSoloGame: false,\r\n    gameId: NIL_UUID,\r\n    userId: 0,\r\n    isWaitingForNextRound: false,\r\n    timeOfNextRound: new Date(),\r\n    currentRound: 0,\r\n    currentQuestion: \"\",\r\n    currentIncorrectAnswers: [] as string[],\r\n    currentCorrectAnswer: \"\",\r\n    allCurrentAnswersShuffled: [] as string[],\r\n    status: GameStatus.Unknown,\r\n    totalUsers: 0,\r\n    remainingUsers: [0],\r\n    requiredToStart: 2,\r\n    isUpdatingRemainingPlayers: false,\r\n    hasSubmittedAnswer: false,\r\n    selectedAnswer: \"\",\r\n    hasPlayerLost: false,\r\n    hasPlayerWon: false,\r\n    isSolo: true,\r\n  },\r\n  action: GameAction\r\n) => {\r\n  let newState = state\r\n\r\n  switch (action.type) {\r\n    case CREATE_NEW_SOLO_GAME_REQUESTED:\r\n      newState = {\r\n        ...newState,\r\n        isCreatingSoloGame: true,\r\n      }\r\n      break\r\n    case CREATE_NEW_SOLO_GAME_SUCCEEDED:\r\n      newState = {\r\n        ...newState,\r\n        isCreatingSoloGame: false,\r\n        gameId: action.gameData.gameId,\r\n        userId: action.gameData.userId,\r\n        isWaitingForNextRound: action.gameData.isWaitingForNextRound,\r\n        timeOfNextRound: action.gameData.timeOfNextRound,\r\n        currentRound: action.gameData.currentRound,\r\n        currentQuestion: action.gameData.currentQuestion,\r\n        currentIncorrectAnswers: action.gameData.currentIncorrectAnswers,\r\n        currentCorrectAnswer: action.gameData.currentCorrectAnswer,\r\n        status: action.gameData.status,\r\n        totalUsers: action.gameData.totalUsers,\r\n        remainingUsers: action.gameData.remainingUsers,\r\n        requiredToStart: action.gameData.requiredToStart,\r\n        isUpdatingRemainingPlayers: false,\r\n        hasSubmittedAnswer: false,\r\n        selectedAnswer: \"\",\r\n        hasPlayerLost: false,\r\n        hasPlayerWon: false,\r\n        isSolo: action.gameData.isSolo\r\n      }\r\n      break\r\n    case CREATE_NEW_SOLO_GAME_FAILED:\r\n      newState = {\r\n        ...newState,\r\n        isCreatingSoloGame: false,\r\n        gameId: NIL_UUID,\r\n        userId: 0,\r\n        isWaitingForNextRound: false,\r\n        currentRound: 0,\r\n        currentQuestion: \"\",\r\n        currentIncorrectAnswers: [] as string[],\r\n        allCurrentAnswersShuffled: [] as string[],\r\n        currentCorrectAnswer: \"\",\r\n        status: GameStatus.Unknown,\r\n        totalUsers: 0,\r\n        remainingUsers: [0],\r\n        requiredToStart: 2,\r\n        isUpdatingRemainingPlayers: false,\r\n        hasSubmittedAnswer: false,\r\n        hasPlayerLost: false,\r\n        hasPlayerWon: false,\r\n        isSolo: false\r\n      }\r\n      break\r\n    case JOIN_MULTIPLAYER_GAME_REQUESTED:\r\n      newState = {\r\n        ...newState,\r\n        isSearchingForGame: true,\r\n      }\r\n      break\r\n    case JOIN_MULTIPLAYER_GAME_SUCCEEDED:\r\n      newState = {\r\n        ...newState,\r\n        isSearchingForGame: false,\r\n        gameId: action.gameData.gameId,\r\n        userId: action.gameData.userId,\r\n        isWaitingForNextRound: action.gameData.isWaitingForNextRound,\r\n        timeOfNextRound: action.gameData.timeOfNextRound,\r\n        currentRound: action.gameData.currentRound,\r\n        currentQuestion: action.gameData.currentQuestion,\r\n        currentIncorrectAnswers: action.gameData.currentIncorrectAnswers,\r\n        currentCorrectAnswer: action.gameData.currentCorrectAnswer,\r\n        status: action.gameData.status,\r\n        totalUsers: action.gameData.totalUsers,\r\n        remainingUsers: action.gameData.remainingUsers,\r\n        requiredToStart: action.gameData.requiredToStart,\r\n        isUpdatingRemainingPlayers: false,\r\n        hasSubmittedAnswer: false,\r\n        selectedAnswer: \"\",\r\n        hasPlayerLost: false,\r\n        hasPlayerWon: false,\r\n        isSolo: action.gameData.isSolo\r\n      }\r\n      break\r\n    case JOIN_MULTIPLAYER_GAME_FAILED:\r\n      newState = {\r\n        ...newState,\r\n        isSearchingForGame: false,\r\n        gameId: NIL_UUID,\r\n        userId: 0,\r\n        isWaitingForNextRound: false,\r\n        currentRound: 0,\r\n        currentQuestion: \"\",\r\n        currentIncorrectAnswers: [] as string[],\r\n        allCurrentAnswersShuffled: [] as string[],\r\n        currentCorrectAnswer: \"\",\r\n        status: GameStatus.Unknown,\r\n        totalUsers: 0,\r\n        remainingUsers: [0],\r\n        requiredToStart: 2,\r\n        isUpdatingRemainingPlayers: false,\r\n        hasSubmittedAnswer: false,\r\n        hasPlayerLost: false,\r\n        hasPlayerWon: false,\r\n        isSolo: false\r\n      }\r\n      break\r\n    case GET_GAME_SUCCEEDED:\r\n      newState = {\r\n        ...newState,\r\n        isCreatingSoloGame: false,\r\n        gameId: action.gameData.gameId,\r\n        isWaitingForNextRound: action.gameData.isWaitingForNextRound,\r\n        timeOfNextRound: action.gameData.timeOfNextRound,\r\n        currentRound: action.gameData.currentRound,\r\n        currentQuestion: action.gameData.currentQuestion,\r\n        currentIncorrectAnswers: action.gameData.currentIncorrectAnswers,\r\n        currentCorrectAnswer: action.gameData.currentCorrectAnswer,\r\n        allCurrentAnswersShuffled: shuffle([...action.gameData.currentIncorrectAnswers, action.gameData.currentCorrectAnswer]),\r\n        status: action.gameData.status,\r\n        totalUsers: action.gameData.totalUsers,\r\n        remainingUsers: action.gameData.remainingUsers,\r\n        requiredToStart: action.gameData.requiredToStart,\r\n        hasPlayerLost: checkIfPlayerLost(action.gameData.remainingUsers, state.userId),\r\n        hasPlayerWon: checkIfPlayerWon(action.gameData.remainingUsers, state.userId),\r\n        hasSubmittedAnswer: false,\r\n        selectedAnswer: \"\",\r\n      }\r\n      break\r\n    case UPDATE_REMAINING_PLAYERS_REQUESTED:\r\n      newState = {\r\n        ...newState,\r\n        isUpdatingRemainingPlayers: true,\r\n        hasSubmittedAnswer: true\r\n      }\r\n      break\r\n    case UPDATE_REMAINING_PLAYERS_SUCCEEDED:\r\n      newState = {\r\n        ...newState,\r\n        isUpdatingRemainingPlayers: false\r\n      }\r\n      break\r\n    case UPDATE_REMAINING_PLAYERS_FAILED:\r\n      newState = {\r\n        ...newState,\r\n        isUpdatingRemainingPlayers: false\r\n      }\r\n      break\r\n    case SELECTED_ANSWER_SET:\r\n      newState = {\r\n        ...newState,\r\n        selectedAnswer: action.answer\r\n      }\r\n      break\r\n  }\r\n  return newState\r\n}\r\n\r\nexport default gameReducer","import { combineReducers } from \"redux\"\r\nimport gameReducer from \"./game/GameReducer\"\r\n\r\nexport default combineReducers({\r\n  game: gameReducer,\r\n})\r\n","import { NIL as NIL_UUID } from \"uuid\"\r\nimport configureStore from \"./configureStore\"\r\nimport { GameStatus } from \"./game/GameConstants\"\r\n\r\nexport interface State {\r\n  game: {\r\n    isSearchingForGame: boolean\r\n    isCreatingSoloGame: boolean\r\n    gameId: string\r\n    userId: number\r\n    isWaitingForNextRound: boolean\r\n    timeOfNextRound: Date\r\n    currentRound: number\r\n    currentQuestion: string\r\n    currentIncorrectAnswers: string[]\r\n    currentCorrectAnswer: string\r\n    allCurrentAnswersShuffled: string[]\r\n    status: GameStatus\r\n    totalUsers: number\r\n    remainingUsers: number[]\r\n    requiredToStart: number\r\n    isUpdatingRemainingPlayers: boolean\r\n    hasSubmittedAnswer: boolean\r\n    selectedAnswer: string\r\n    hasPlayerLost: boolean\r\n    hasPlayerWon: boolean\r\n    isSolo: boolean\r\n  }\r\n}\r\n\r\nconst initialState: State = {\r\n  game: {\r\n    isSearchingForGame: false,\r\n    isCreatingSoloGame: false,\r\n    gameId: NIL_UUID,\r\n    userId: 0,\r\n    isWaitingForNextRound: false,\r\n    timeOfNextRound: new Date(),\r\n    currentRound: 0,\r\n    currentQuestion: \"\",\r\n    currentIncorrectAnswers: [] as string[],\r\n    currentCorrectAnswer: \"\",\r\n    allCurrentAnswersShuffled: [] as string[],\r\n    status: GameStatus.Unknown,\r\n    totalUsers: 0,\r\n    remainingUsers: [0],\r\n    requiredToStart: 2,\r\n    isUpdatingRemainingPlayers: false,\r\n    hasSubmittedAnswer: false,\r\n    selectedAnswer: \"\",\r\n    hasPlayerLost: false,\r\n    hasPlayerWon: false,\r\n    isSolo: false\r\n  }\r\n}\r\n\r\nexport const store = configureStore(initialState)","import { applyMiddleware, createStore } from \"redux\"\r\nimport { composeWithDevTools } from \"redux-devtools-extension\"\r\nimport thunk from \"redux-thunk\"\r\nimport combineReducers from \"./index\"\r\nimport { State } from \"./store\"\r\n\r\nexport default function configureStore(initialState: State) {\r\n  return createStore(combineReducers, initialState, composeWithDevTools(applyMiddleware(thunk)))\r\n}","import \"bootstrap/dist/css/bootstrap.min.css\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport App from \"./components/App\"\nimport { store } from \"./store/store\"\nimport \"./stylesheets/index.css\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}